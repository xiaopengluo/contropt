% Contractility of continuous optimization
% by Xiaopeng Luo and Xin Xu 
% 
% Fig. 3-a
% 
% 4 atoms Lennard-Jones conformation

clear; clc;

lju = @(r) r.^-12 - 2*r.^-6;
dis = @(a,b)sqrt(sum((a-b).^2,2));
objLJ4 = @(x) log(log(lju(dis([0 0 0],[x(:,1) zeros(size(x,1),2)]))...
    +lju(dis([0 0 0],[x(:,2:3) zeros(size(x,1),1)]))...
    +lju(dis([0 0 0],x(:,4:6)))...
    +lju(dis([x(:,1) zeros(size(x,1),2)],[x(:,2:3) zeros(size(x,1),1)]))...
    +lju(dis([x(:,1) zeros(size(x,1),2)],x(:,4:6)))...
    +lju(dis([x(:,2:3) zeros(size(x,1),1)],x(:,4:6))) + 6 + 1 ) + 1);

lb4 = [0.5 0 0.5 0 0 0]; 
ub4 = [1.2 1.2 1.2 1.2 1.2 1.2];

% %  call the optimization algorithm - contropt

N = 10; maxN = 200; minL = 5; K = 21; 
type={'median','low',0.4};
tic
[best,mdl,thr] = contropt(objLJ4,type,K,minL,N,maxN,lb4,ub4);
toc
YM = max(mdl{1}.Y);
Nk = length(mdl{1}.Y);
for i=2:length(best.N)
    Nk = [Nk; length(mdl{i}.Y)];
end
% save('fig3_4atoms.mat','best','Nk','YM')

% %  fig3_4atoms stores a result generated by the code segment above
% load('fig3_4atoms.mat')
figure('units','normalized','position',[0.1,0.2,0.3,0.4])
n = 4-3;
T = [0 0 0; best.x(end,1) 0 0; best.x(end,2:3) 0];
T = [T; reshape(best.x(end,4:3+3*n),3,n)'];
draw_ball_and_stick(T);
saveas(gcf,['LJ-' num2str(1)],'epsc')

figure('units','normalized','position',[0.3,0.2,0.3,0.4])
semilogy([0;best.N],exp(exp([YM; best.y])-1)-7+6)
axis([0 1000 1e-5 1e1])
hold on
plot([0;best.N],exp(exp([YM; best.y])-1)-7+6,'b.')
hold off
ylabel('Absolute error');
xlabel('function evaluations');
yticks([1e-5 1e-4 1e-3 1e-2 1e-1 1e0 1e1])
saveas(gcf,['LJ-' num2str(4)],'epsc')

figure('units','normalized','position',[0.5,0.2,0.3,0.4])
plot((0:length(best.N)-1)',Nk);
hold on
plot((0:length(best.N)-1)',Nk,'b.');
hold off
box on
axis([0 length(best.N)-1 0 200])
ylabel('Sample size');
xlabel('k-th model');
saveas(gcf,['LJ-' num2str(7)],'epsc')

%end main function
%   subfunction: 
function draw_ball_and_stick(X)
N =size(X,1);
hold on
axis off
axis square
for i=1:4
    for j=i+1:4
        cylinder3(X(i,:),X(j,:),.02,20);
    end
end
for i=1:N
    balls(.08,X(i,:));
end
light('position',[40,40,40],'style','local','Color',[1 1 1])
material dull  
lighting phong
colormap([.65 .65 .65])
end
function balls(r,p)
[X,Y,Z]=sphere(100);
X=p(1)+r*X;
Y=p(2)+r*Y;
Z=p(3)+r*Z;
surf(X,Y,Z,'EdgeAlpha',0);
end
function [Cylinder,EndPlate1,EndPlate2] = cylinder3(X1,X2,r,n)
cyl_color	= [0.7 0.7 0.7];
closed      = 0;
lines       = 0;
length_cyl=norm(X2-X1);
t=linspace(0,2*pi,n)';
x2=r*cos(t);
x3=r*sin(t);
x1=[0 length_cyl];
xx1=repmat(x1,length(x2),1);
xx2=repmat(x2,1,2);
xx3=repmat(x3,1,2);
if closed==1
    hold on
    EndPlate1=fill3(xx1(:,1),xx2(:,1),xx3(:,1),'k');
    EndPlate2=fill3(xx1(:,2),xx2(:,2),xx3(:,2),'k');
end
Cylinder = mesh(xx1,xx2,xx3,'EdgeColor',.9*cyl_color);
uv = [1 0 0];
angle_X1X2=acos( dot( uv,(X2-X1) )/( norm(uv)*norm(X2-X1)) )*180/pi;
axis_rot=cross([1 0 0],(X2-X1) );
if angle_X1X2~=0 
    rotate(Cylinder,axis_rot,angle_X1X2,[0 0 0])
    if closed==1
        rotate(EndPlate1,axis_rot,angle_X1X2,[0 0 0])
        rotate(EndPlate2,axis_rot,angle_X1X2,[0 0 0])
    end
end
if closed==1
    set(EndPlate1,'XData',get(EndPlate1,'XData')+X1(1))
    set(EndPlate1,'YData',get(EndPlate1,'YData')+X1(2))
    set(EndPlate1,'ZData',get(EndPlate1,'ZData')+X1(3))
    set(EndPlate2,'XData',get(EndPlate2,'XData')+X1(1))
    set(EndPlate2,'YData',get(EndPlate2,'YData')+X1(2))
    set(EndPlate2,'ZData',get(EndPlate2,'ZData')+X1(3))
end
set(Cylinder,'XData',get(Cylinder,'XData')+X1(1))
set(Cylinder,'YData',get(Cylinder,'YData')+X1(2))
set(Cylinder,'ZData',get(Cylinder,'ZData')+X1(3))
set(Cylinder,'FaceColor',cyl_color)
if closed==1
    set([EndPlate1 EndPlate2],'FaceColor',cyl_color)
else
    EndPlate1=[];
    EndPlate2=[];
end
if lines==0
    set(Cylinder,'EdgeAlpha',lines);
    set(Cylinder,'EdgeColor','k');
end
light('position',[40,40,40],'style','local','Color',.01*[1 1 1])
material dull  
lighting phong
colormap([.4 .4 .4])
end